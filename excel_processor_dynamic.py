import pandas as pd
import time
import psycopg2
from bs4 import BeautifulSoup
from openpyxl import load_workbook
import tkinter.messagebox as messagebox  # –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
import requests
import helpers
from openpyxl.styles import Alignment



def get_id_with_leading_zeros(value):
    if pd.isna(value):
        return None
    str_value = str(value).strip()
    if 'E+' in str_value.upper() or 'e+' in str_value:
        try:
            float_val = float(str_value)
            int_val = int(float_val)
            str_value = str(int_val)
        except:
            pass
    if '.' in str_value:
        try:
            float_val = float(str_value)
            if float_val.is_integer():
                str_value = str(int(float_val))
        except:
            pass
    return str_value


def fetch_html_with_timeout(url, timeout=5):
    try:
        response = requests.get(url, timeout=timeout)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
        return None


def analyze_application_from_html(html_content, return_deadline=False):
    try:
        soup = BeautifulSoup(html_content, "html.parser")
        result = helpers.analyzeFullApplication(soup, return_deadline=return_deadline)
        return result  # –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç return_deadline
    except Exception as e:
        return (f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTML: {e}", None) if return_deadline else f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTML: {e}"


def query_postgres_by_app_id(app_id, conn):
    try:
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è app_id: {app_id}")
        with conn.cursor() as cur:
            cur.execute("""
                SELECT i.id, i.requestnumber, h.status AS status_name, h.creation_date
                FROM history.application_info i
                LEFT JOIN history.status_history h ON h.applicationinfo_id = i.id
                LEFT JOIN history.status_go s ON s.id = h.statusgo_id
                WHERE i.requestnumber  = %s
                ORDER BY h.creation_date DESC;
            """, (app_id,))

            results = cur.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Å—Ç—Ä–æ–∫ –∏–∑ –ë–î")

            if results:
                first_result = results[0]
                status = first_result[2] or "–°—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å ‚Äî –æ–ø–ª–∞—Ç–∞, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ-–æ–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                if status in ["PAYED", "WAITING_FOR_PAYMENT"]:
                    index = 1  # –Ω–∞—á–∏–Ω–∞–µ–º —Å —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ first_result
                    while index < len(results):
                        temp_status = results[index][2]
                        if temp_status not in ["PAYED", "WAITING_FOR_PAYMENT"]:
                            status = temp_status or "–°—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                            break
                        index += 1
                    else:
                        # –µ—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã ‚Äî –æ–ø–ª–∞—Ç–Ω—ã–µ
                        status = "–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω"

            #     print("–°—Ç–∞—Ç—É—Å:", status)
            # else:
            #     status = "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"


                # TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PAYED WAITING FOR PAYMENT
                date = first_result[3].strftime('%Y-%m-%d %H:%M:%S.%f') if first_result[3] else "–î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                dbConclusion = helpers.analyzeDBStatuses(status)

                # –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –º–æ–∂–Ω–æ —Ç–∞–∫:
                # return dbConclusion, date, results
                if helpers.hasTechErrors(results):
                    return dbConclusion + ". –ï—Å—Ç—å TECH_ERROR", date
                return dbConclusion, date
            else:
                return "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–ª–µ–Ω–∏—è", ""

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", ""



def preserve_excel_formatting(original_file, output_file, df_updated, sheet_index):
    try:
        wb = load_workbook(original_file)
        ws = wb.worksheets[sheet_index]

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        comment_col_index = None
        for col_idx, cell in enumerate(ws[1], 1):
            if cell.value and '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ê–û –ù–ò–¢' in str(cell.value):
                comment_col_index = col_idx
                break
        if comment_col_index is None:
            return False

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å wrapText
        wrap_alignment = Alignment(wrap_text=True)

        for row_idx in range(2, len(df_updated) + 2):
            df_row_idx = row_idx - 2
            comment_value = df_updated.iloc[df_row_idx]['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ê–û –ù–ò–¢']

            if pd.notna(comment_value) and comment_value != '':
                cell = ws.cell(row=row_idx, column=comment_col_index)
                cell.value = comment_value
                cell.alignment = wrap_alignment

                # ‚úÖ –í–ê–ñ–ù–û: –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                ws.row_dimensions[row_idx].height = None

        wb.save(output_file)
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel: {e}")
        return False


def process_html_sheet(file_path, output_path):
    try:
        df = pd.read_excel(file_path, sheet_name=0, engine='openpyxl', dtype=str)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Excel: {e}")
        return

    identifier_col = comment_col = None
    for col in df.columns:
        if '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä' in str(col):
            identifier_col = col
        elif '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ê–û –ù–ò–¢' in str(col):
            comment_col = col

    if identifier_col is None:
        print("–°—Ç–æ–ª–±–µ—Ü –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return

    if comment_col is None:
        comment_col = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ê–û –ù–ò–¢'
        df[comment_col] = ''

    print(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {identifier_col}")
    print(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_col}")
    print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(df)}")

    base_url = "http://192.168.130.100/csp/iiscon/isc.util.About.cls?Action=4&appId="
    successful_count = 0
    failed_count = 0

    for index, row in df.iterrows():
        app_id_raw = row[identifier_col]
        if pd.isna(app_id_raw) or str(app_id_raw).strip() in ('', 'nan'):
            continue

        app_id = get_id_with_leading_zeros(app_id_raw)
        if app_id is None:
            continue

        url = base_url + app_id
        print(f"\n[{index + 1}/{len(df)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ ID: {app_id}")

        html_content = fetch_html_with_timeout(url, timeout=5)
        if html_content:
            conclusion = analyze_application_from_html(html_content, return_deadline=False)
            df.at[index, comment_col] = conclusion
            successful_count += 1
            print(f"‚úì –£—Å–ø–µ—à–Ω–æ: {conclusion}")
        else:
            df.at[index, comment_col] = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            failed_count += 1
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        time.sleep(0.5)

    preserved = preserve_excel_formatting(file_path, output_path, df, sheet_index=0)
    if not preserved:
        print("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
        df.to_excel(output_path, index=False, engine='openpyxl')

    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}")
    print(f"–û—à–∏–±–æ–∫: {failed_count}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")


def process_pep_sheet_with_full_analysis(file_path, output_path, db_config):
    try:
        df = pd.read_excel(file_path, sheet_name=2, engine='openpyxl', dtype=str)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ '–ü–≠–ü': {e}")
        return

    identifier_col = comment_col = pep_col = None
    for col in df.columns:
        if '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏' in str(col):
            identifier_col = col
        elif '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ê–û –ù–ò–¢' in str(col):
            comment_col = col
        elif '–ù–æ–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è' in str(col):
            pep_col = col

    if identifier_col is None or pep_col is None:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–∞ –ª–∏—Å—Ç–µ '–ü–≠–ü'")
        return

    if comment_col is None:
        comment_col = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ê–û –ù–ò–¢'
        df[comment_col] = ''

    print(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {identifier_col}")
    print(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü PEP: {pep_col}")
    print(f"–ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_col}")
    print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(df)}")

    successful_count = 0
    failed_count = 0
    BATCH_SIZE = 100
    conn = None

    for index, row in df.iterrows():
        app_id = row[identifier_col]
        pep_id = row[pep_col]
        if pd.isna(app_id) or pd.isna(pep_id):
            continue

        if index % BATCH_SIZE == 0:
            if conn:
                conn.close()
            try:
                conn = psycopg2.connect(
                    host=db_config["host"],
                    port=db_config["port"],
                    dbname=db_config["dbname"],
                    user=db_config["user"],
                    password=db_config["password"],
                    sslmode="disable",
                    connect_timeout=5,
                    options='-c statement_timeout=5000'
                )
                print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (batch {index // BATCH_SIZE + 1})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
                conn = None

        print(f"\n[{index + 1}/{len(df)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ PEP-–∑–∞–ø–∏—Å–∏: ID={app_id}, –ù–æ–º–µ—Ä={pep_id}")

        html_content = fetch_html_with_timeout(
            f"http://192.168.130.100/csp/iiscon/isc.util.About.cls?Action=4&appId={app_id}")

        if html_content:
            html_conclusion, deadline = analyze_application_from_html(html_content, return_deadline=True)
        else:
            html_conclusion, deadline = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML", None
            df.at[index, comment_col] = html_conclusion
            print(f"‚úì –û—à–∏–±–∫–∞: {html_conclusion}")
            continue

        # ‚úÖ –ï—Å–ª–∏ —Å—Ä–∞–∑—É –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        if html_conclusion in [
            "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
            "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ì–û."
        ]:
            df.at[index, comment_col] = html_conclusion
            print(f"‚úì –£—Å–ø–µ—à–Ω–æ: {html_conclusion}")
            successful_count += 1
            time.sleep(0.5)
            continue  # ‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É DataFrame

        if not str(pep_id).startswith(('0', '1')):
            df.at[index, comment_col] = html_conclusion
            print(f"‚úì –£—Å–ø–µ—à–Ω–æ: {html_conclusion}")
            successful_count += 1
            time.sleep(0.5)
            continue  # ‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É DataFrame

        if not conn or conn.closed != 0:
            df.at[index, comment_col] = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"
            failed_count += 1
            print("‚õî –ü—Ä–æ–ø—É—Å–∫ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            continue

        db_status, finishDate = query_postgres_by_app_id(pep_id, conn)

        if db_status == html_conclusion:
            df.at[index, comment_col] = html_conclusion
            print(f"‚úì –£—Å–ø–µ—à–Ω–æ: {html_conclusion}")

        elif db_status == "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ SHEP" and html_conclusion in ["–ì–£ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏.", "–ì–£ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ì–û."]:
            conc = "–ì–£ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ì–û."
            df.at[index, comment_col] = conc
            print(conc)
        elif db_status in ["FINISHED", "CANCELLED", "APPROVED"]:
            print(f"db date {finishDate}")
            print(f"shina deadline {deadline}")
            if helpers.checkStatusDeadline(finishDate, deadline):
                conc = "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ."
                if html_conclusion != "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ." or "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ì–û.":
                    conc += " –û–¥–Ω–∞–∫–æ —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ò–ò–° –¶–û–ù."
                df.at[index, comment_col] = conc
                print(conc)
            else:
                conc = "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ì–û."
                if html_conclusion != "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ." or "–ì–£ –æ–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ì–û.":
                    conc += " –û–¥–Ω–∞–∫–æ —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ò–ò–° –¶–û–ù."
                df.at[index, comment_col] = conc
                print(conc)
        else:
            df.at[index, comment_col] = f"HTML: {html_conclusion} | –ë–î: {db_status}"
            print(f"HTML: {html_conclusion} | –ë–î: {db_status}")

        successful_count += 1
        time.sleep(0.5)

    preserved = preserve_excel_formatting(file_path, output_path, df, sheet_index=2)
    if not preserved:
        print("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
        df.to_excel(output_path, index=False, engine='openpyxl')

    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–ü–≠–ü) ===")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}")
    print(f"–û—à–∏–±–æ–∫: {len(df) - successful_count}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")


def process_combined_excel_pipeline(file_path, output_path, db_config):
    process_html_sheet(file_path, output_path)

    # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –ü–≠–ü
    proceed = messagebox.askyesno(
        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ü–≠–ü-–ª–∏—Å—Ç—É",
        "HTML-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–≠–ü-–ª–∏—Å—Ç–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?"
    )

    if not proceed:
        print("‚èπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —ç—Ç–∞–ø–µ HTML.")
        return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º ‚Äî HTML —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    try:
        # üîÑ –ü–µ—Ä–µ–¥–∞—ë–º db_config –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ –≤–Ω—É—Ç—Ä–∏
        process_pep_sheet_with_full_analysis(file_path, output_path, db_config)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –ü–≠–ü: {e}")


